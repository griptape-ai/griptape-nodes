{
  "name": "Griptape Nodes Library",
  "library_schema_version": "0.1.0",
  "metadata": {
    "author": "Griptape, Inc",
    "description": "Default nodes for Griptape Nodes",
    "library_version": "0.50.0",
    "engine_version": "0.50.0",
    "tags": [
      "Griptape",
      "AI"
    ],
    "dependencies": {
      "pip_dependencies": [
        "griptape[drivers-prompt-amazon-bedrock,drivers-prompt-anthropic,drivers-prompt-cohere,drivers-prompt-ollama,drivers-web-scraper-trafilatura,drivers-web-search-duckduckgo,drivers-web-search-exa,loaders-image,loaders-pdf]>=1.7.1",
        "json-repair>=0.46.1",
        "static-ffmpeg>=2.8"
      ]
    }
  },
  "categories": [
    {
      "misc": {
        "title": "misc",
        "description": "Miscellaneous nodes",
        "color": "border-gray-500",
        "icon": "Folder"
      }
    },
    {
      "execution_flow": {
        "color": "border-green-500",
        "title": "Execution Flow",
        "description": "Execution Nodes",
        "icon": "split"
      }
    },
    {
      "agents": {
        "color": "border-purple-500",
        "title": "Agent",
        "description": "Nodes related to Agents",
        "icon": "UserCircle"
      }
    },
    {
      "agents/prompt_models": {
        "color": "border-indigo-500",
        "title": "Prompt Models",
        "description": "Prompt Drivers for Griptape Agents",
        "icon": "brain"
      }
    },
    {
      "agents/rules": {
        "color": "border-violet-500",
        "title": "Rules",
        "description": "Basic nodes",
        "icon": "Scale"
      }
    },
    {
      "agents/tasks": {
        "color": "border-cyan-500",
        "title": "Tasks",
        "description": "Run various tasks",
        "icon": "Config"
      }
    },
    {
      "agents/tools": {
        "color": "border-cyan-500",
        "title": "Tools",
        "description": "Tools an agent can use",
        "icon": "Wrench"
      }
    },
    {
      "engine": {
        "color": "border-red-500",
        "title": "Engine",
        "description": "Engine control and introspection nodes",
        "icon": "Cog"
      }
    },
    {
      "agents/tools/config": {
        "color": "border-cyan-500",
        "title": "Drivers",
        "description": "Drivers for Griptape Agents",
        "icon": "Truck"
      }
    },
    {
      "3D": {
        "color": "border-indigo-500",
        "title": "3D",
        "description": "3D model related nodes",
        "icon": "Cube",
        "group": "create"
      }
    },
    {
      "audio": {
        "color": "border-sky-500",
        "title": "Audio",
        "description": "Audio related nodes",
        "icon": "audio-lines",
        "group": "create"
      }
    },
    {
      "video": {
        "color": "border-pink-500",
        "title": "Video",
        "description": "Video related nodes",
        "icon": "Video",
        "group": "create"
      }
    },
    {
      "image": {
        "color": "border-purple-500",
        "title": "Image",
        "description": "Image related nodes",
        "icon": "Image",
        "group": "create"
      }
    },
    {
      "image/image_models": {
        "color": "border-indigo-500",
        "title": "Image Models",
        "description": "Image Generation Models for Griptape Agents",
        "icon": "brain",
        "group": "create"
      }
    },
    {
      "image/depth": {
        "color": "border-purple-500",
        "title": "image/depth",
        "description": "",
        "icon": "Image"
      }
    },
    {
      "image/edge": {
        "color": "border-purple-500",
        "title": "image/edge",
        "description": "",
        "icon": "Image"
      }
    },
    {
      "image/flux": {
        "color": "border-purple-500",
        "title": "image/flux",
        "description": "",
        "icon": "Image"
      }
    },
    {
      "image/flux/controlnet": {
        "color": "border-purple-500",
        "title": "image/flux/controlnet",
        "description": "",
        "icon": "Image"
      }
    },
    {
      "image/flux/loras": {
        "color": "border-purple-500",
        "title": "image/flux/loras",
        "description": "",
        "icon": "Image"
      }
    },
    {
      "image/upscale": {
        "color": "border-purple-500",
        "title": "Image/Upscale",
        "description": "Image upscaling related nodes",
        "icon": "Image"
      }
    },
    {
      "number": {
        "color": "border-blue-500",
        "title": "Number",
        "description": "Number Nodes",
        "icon": "Hash",
        "group": "create"
      }
    },
    {
      "text": {
        "color": "border-blue-500",
        "title": "Text",
        "description": "Text related nodes",
        "icon": "DocumentText",
        "group": "create"
      }
    },
    {
      "dict": {
        "color": "border-green-500",
        "title": "Dictionary",
        "description": "Dictionary Nodes",
        "icon": "Braces",
        "group": "create"
      }
    },
    {
      "convert": {
        "color": "border-cyan-500",
        "title": "Convert",
        "description": "Convert nodes",
        "icon": "Shuffle",
        "group": "edit"
      }
    },
    {
      "json": {
        "color": "border-cyan-500",
        "title": "JSON",
        "description": "JSON data manipulation nodes",
        "icon": "Braces",
        "group": "create"
      }
    },
    {
      "utils": {
        "color": "border-gray-500",
        "title": "Utility",
        "description": "Utility nodes like save, etc., etc",
        "icon": "Cog"
      }
    },
    {
      "lists": {
        "color": "border-slate-500",
        "title": "Lists",
        "description": "Nodes to interact with and work with Lists",
        "icon": "List",
        "group": "create"
      }
    },
    {
      "workflows": {
        "color": "border-gray-500",
        "title": "Workflows",
        "description": "Nodes for executing Workflows",
        "icon": "Workflow",
        "group": "create"
      }
    },
    {
      "variables": {
        "color": "border-amber-500",
        "title": "Variables",
        "description": "Flow variable management nodes with hierarchical scoping",
        "icon": "Variable",
        "group": "create"
      }
    },
    {
      "audio/audioldm": {
        "color": "border-sky-500",
        "title": "Audio/AudioLDM",
        "description": "Audio generation with AudioLDM",
        "icon": "SpeakerWave"
      }
    },
    {
      "audio/audioldm2": {
        "color": "border-sky-500",
        "title": "Audio/AudioLDM2",
        "description": "Audio generation with AudioLDM 2",
        "icon": "SpeakerWave"
      }
    },
    {
      "image/amused": {
        "color": "border-purple-500",
        "title": "Image/aMUSEd",
        "description": "Image generation with aMUSEd",
        "icon": "Image"
      }
    },
    {
      "image/stable_diffusion": {
        "color": "border-purple-500",
        "title": "Image/Stable Diffusion",
        "description": "Image generation with Stable Diffusion",
        "icon": "Image"
      }
    },
    {
      "image/stable_diffusion_3": {
        "color": "border-purple-500",
        "title": "Image/Stable Diffusion 3",
        "description": "Image generation with Stable Diffusion 3",
        "icon": "Image"
      }
    },
    {
      "image/stable_diffusion_attend_and_excite": {
        "color": "border-purple-500",
        "title": "Image/SD Attend and Excite",
        "description": "Enhanced attention control",
        "icon": "Image"
      }
    },
    {
      "image/stable_diffusion_diffedit": {
        "color": "border-purple-500",
        "title": "Image/SD DiffEdit",
        "description": "Image editing with DiffEdit",
        "icon": "Image"
      }
    },
    {
      "image/würstchen": {
        "color": "border-purple-500",
        "title": "image/würstchen",
        "description": "Efficient generation with Würstchen",
        "icon": "Image"
      }
    },
    {
      "video/allegro": {
        "color": "border-pink-500",
        "title": "Video/Allegro",
        "description": "Video generation with Allegro",
        "icon": "Video"
      }
    },
    {
      "video/wan": {
        "color": "border-pink-500",
        "title": "video/wan",
        "description": "",
        "icon": "Video"
      }
    },
    {
      "video/wan/aux": {
        "color": "border-pink-500",
        "title": "Video/WAN/Aux",
        "description": "Auxiliary nodes for WAN video generation",
        "icon": "Video"
      }
    },
    {
      "video/wan/loras": {
        "color": "border-pink-500",
        "title": "video/wan/loras",
        "description": "",
        "icon": "Video"
      }
    },
    {
      "image/cosmos": {
        "color": "border-purple-500",
        "title": "Image/Cosmos",
        "description": "Image generation with Cosmos",
        "icon": "Image"
      }
    }
  ],
  "nodes": [
    {
      "class_name": "AddToList",
      "file_path": "griptape_nodes_library/lists/add_to_list.py",
      "metadata": {
        "category": "lists",
        "description": "Takes a list input and adds a value to the list at the specified index.",
        "display_name": "Add To List",
        "icon": "list-plus",
        "group": "edit"
      }
    },
    {
      "class_name": "CombineLists",
      "file_path": "griptape_nodes_library/lists/combine_lists.py",
      "metadata": {
        "category": "lists",
        "description": "Takes two lists and combines them into a single flattened list.",
        "display_name": "Combine Lists",
        "group": "merge"
      }
    },
    {
      "class_name": "CreateList",
      "file_path": "griptape_nodes_library/lists/create_list.py",
      "metadata": {
        "category": "lists",
        "description": "Takes a list of items and creates a list.",
        "display_name": "Create List",
        "group": "create"
      }
    },
    {
      "class_name": "BoolInput",
      "file_path": "griptape_nodes_library/number/create_bool.py",
      "metadata": {
        "category": "number",
        "description": "Creates a boolean value.",
        "display_name": "Bool Input",
        "icon": "toggle-right",
        "group": "general"
      }
    },
    {
      "class_name": "CreateBoolList",
      "file_path": "griptape_nodes_library/lists/create_bool_list.py",
      "metadata": {
        "category": "lists",
        "description": "Creates a list of boolean values.",
        "display_name": "Create Bool List",
        "group": "create"
      }
    },
    {
      "class_name": "CreateFloatList",
      "file_path": "griptape_nodes_library/lists/create_float_list.py",
      "metadata": {
        "category": "lists",
        "description": "Creates a list of float values.",
        "display_name": "Create Float List",
        "group": "create"
      }
    },
    {
      "class_name": "EngineNode",
      "file_path": "griptape_nodes_library/engine/engine_node.py",
      "metadata": {
        "category": "engine",
        "description": "Dynamically call any RequestPayload in the engine",
        "display_name": "Engine Node",
        "icon": "Cog"
      }
    },
    {
      "class_name": "CreateIntList",
      "file_path": "griptape_nodes_library/lists/create_int_list.py",
      "metadata": {
        "category": "lists",
        "description": "Creates a list of integer values.",
        "display_name": "Create Int List",
        "group": "create"
      }
    },
    {
      "class_name": "CreateTextList",
      "file_path": "griptape_nodes_library/lists/create_text_list.py",
      "metadata": {
        "category": "lists",
        "description": "Creates a list of text items",
        "display_name": "Create Text List",
        "group": "create"
      }
    },
    {
      "class_name": "CreateImageList",
      "file_path": "griptape_nodes_library/lists/create_image_list.py",
      "metadata": {
        "category": "lists",
        "description": "Creates a list of image items",
        "display_name": "Create Image List",
        "group": "create"
      }
    },
    {
      "class_name": "GetFromList",
      "file_path": "griptape_nodes_library/lists/get_from_list.py",
      "metadata": {
        "category": "lists",
        "description": "Takes a list of items and gets an item at a specified index from the list.",
        "display_name": "Get From List",
        "group": "describe"
      }
    },
    {
      "class_name": "GetIndexOfItem",
      "file_path": "griptape_nodes_library/lists/get_index_of_item.py",
      "metadata": {
        "category": "lists",
        "description": "Takes a list of items and gets the index of an item in the list.",
        "display_name": "Get Index Of Item",
        "group": "describe"
      }
    },
    {
      "class_name": "GetListContainsItem",
      "file_path": "griptape_nodes_library/lists/get_list_contains_item.py",
      "metadata": {
        "category": "lists",
        "description": "Takes a list of items and checks if the list contains an item.",
        "display_name": "Get List Contains Item",
        "group": "describe"
      }
    },
    {
      "class_name": "GetListIsEmpty",
      "file_path": "griptape_nodes_library/lists/get_list_is_empty.py",
      "metadata": {
        "category": "lists",
        "description": "Takes a list of items and checks if the list is empty.",
        "display_name": "Get List Is Empty",
        "group": "describe"
      }
    },
    {
      "class_name": "GetListLength",
      "file_path": "griptape_nodes_library/lists/get_list_length.py",
      "metadata": {
        "category": "lists",
        "description": "Takes a list of items and gets the length of the list.",
        "display_name": "Get List Length",
        "group": "describe"
      }
    },
    {
      "class_name": "RemoveFromList",
      "file_path": "griptape_nodes_library/lists/remove_from_list.py",
      "metadata": {
        "category": "lists",
        "description": "Takes a list input and removes an item from the list at the specified index or by value.",
        "display_name": "Remove From List",
        "icon": "list-minus",
        "group": "edit"
      }
    },
    {
      "class_name": "ReplaceInList",
      "file_path": "griptape_nodes_library/lists/replace_in_list.py",
      "metadata": {
        "category": "lists",
        "description": "Takes a list input and replaces an item either by matching the item or by index.",
        "display_name": "Replace In List",
        "icon": "list-restart",
        "group": "edit"
      }
    },
    {
      "class_name": "SplitList",
      "file_path": "griptape_nodes_library/lists/split_list.py",
      "metadata": {
        "category": "lists",
        "description": "Takes a list input and splits it either by index or by item value, with options for keeping the split item.",
        "display_name": "Split List",
        "icon": "square-split-vertical",
        "group": "edit"
      }
    },
    {
      "class_name": "SplitText",
      "file_path": "griptape_nodes_library/lists/split_text.py",
      "metadata": {
        "category": "lists",
        "description": "Takes a text string and splits it into a list based on a specified delimiter.",
        "display_name": "Split Text",
        "icon": "scissors",
        "group": "edit"
      }
    },
    {
      "class_name": "DisplayList",
      "file_path": "griptape_nodes_library/lists/display_list.py",
      "metadata": {
        "category": "lists",
        "description": "Takes a list input and creates output parameters for each item in the list",
        "display_name": "Display List",
        "group": "display"
      }
    },
    {
      "class_name": "Agent",
      "file_path": "griptape_nodes_library/agents/agent.py",
      "metadata": {
        "category": "agents",
        "description": "Creates an AI agent with conversation memory and the ability to use tools",
        "display_name": "Agent",
        "group": "create"
      }
    },
    {
      "class_name": "LoadAudio",
      "file_path": "griptape_nodes_library/audio/load_audio.py",
      "metadata": {
        "category": "audio",
        "description": "Loads audio files into your workflow",
        "display_name": "Load Audio",
        "icon": "file-up",
        "group": "Input/Output"
      }
    },
    {
      "class_name": "Microphone",
      "file_path": "griptape_nodes_library/audio/microphone.py",
      "metadata": {
        "category": "audio",
        "description": "Can record audio from your microphone.",
        "display_name": "Microphone",
        "icon": "mic",
        "group": "create"
      }
    },
    {
      "class_name": "TranscribeAudio",
      "file_path": "griptape_nodes_library/audio/transcribe_audio.py",
      "metadata": {
        "category": "audio",
        "description": "Transcribe audio files into text.\nRequires an OpenAI API key.",
        "display_name": "Transcribe Audio",
        "icon": "ear",
        "group": "describe"
      }
    },
    {
      "class_name": "ElevenMusicGeneration",
      "file_path": "griptape_nodes_library/audio/eleven_music_generation.py",
      "metadata": {
        "category": "audio",
        "description": "Generate music using Eleven Labs Music Generation API",
        "display_name": "Eleven Music Generation",
        "icon": "music",
        "group": "create"
      }
    },
    {
      "class_name": "LoadVideo",
      "file_path": "griptape_nodes_library/video/load_video.py",
      "metadata": {
        "category": "video",
        "description": "Loads video files into your workflow",
        "display_name": "Load Video",
        "icon": "file-video",
        "group": "Input/Output"
      }
    },
    {
      "class_name": "DisplayVideo",
      "file_path": "griptape_nodes_library/video/display_video.py",
      "metadata": {
        "category": "video",
        "description": "Display a video",
        "display_name": "Display Video",
        "icon": "monitor-play",
        "group": "display"
      }
    },
    {
      "class_name": "ResizeVideo",
      "file_path": "griptape_nodes_library/video/resize_video.py",
      "metadata": {
        "category": "video",
        "description": "Resize a video using imageio_ffmpeg",
        "display_name": "Resize Video",
        "icon": "picture-in-picture",
        "group": "edit"
      }
    },
    {
      "class_name": "SaveVideo",
      "file_path": "griptape_nodes_library/video/save_video.py",
      "metadata": {
        "category": "video",
        "description": "Save a video to a file",
        "display_name": "Save Video",
        "icon": "file-down",
        "group": "Input/Output"
      }
    },
    {
      "class_name": "GetVideoMetadata",
      "file_path": "griptape_nodes_library/video/get_video_metadata.py",
      "metadata": {
        "category": "video",
        "description": "Extract metadata from video files including aspect ratio",
        "display_name": "Get Video Metadata",
        "icon": "info",
        "group": "describe"
      }
    },
    {
      "class_name": "SeedanceVideoGeneration",
      "file_path": "griptape_nodes_library/video/seedance_video_generation.py",
      "metadata": {
        "category": "video",
        "description": "Generate a video using the Seedance model via Griptape Cloud Forwarders.",
        "display_name": "Seedance Video Generation",
        "icon": "Sparkles",
        "group": "create"
      }
    },
    {
      "class_name": "SplitVideo",
      "file_path": "griptape_nodes_library/video/split_video.py",
      "metadata": {
        "category": "video",
        "description": "Split a video into multiple parts using ffmpeg with timecode support",
        "display_name": "Split Video",
        "icon": "scissors",
        "group": "edit"
      }
    },
    {
      "class_name": "ConcatenateVideos",
      "file_path": "griptape_nodes_library/video/concatenate_videos.py",
      "metadata": {
        "category": "video",
        "description": "Concatenate multiple videos into a single video file with configurable format and codec options",
        "display_name": "Concatenate Videos",
        "icon": "link",
        "group": "merge"
      }
    },
    {
      "class_name": "HoldVideoFrames",
      "file_path": "griptape_nodes_library/video/hold_video_frames.py",
      "metadata": {
        "category": "video",
        "description": "Hold video frames for a specified number of frames, creating a stepped video effect",
        "display_name": "Hold Video Frames",
        "icon": "pause-circle",
        "group": "effects"
      }
    },
    {
      "class_name": "AddFilmGrain",
      "file_path": "griptape_nodes_library/video/add_film_grain.py",
      "metadata": {
        "category": "video",
        "description": "Add realistic film grain to video using sophisticated noise generation and luminance masking",
        "display_name": "Add Film Grain",
        "icon": "film",
        "group": "effects"
      }
    },
    {
      "class_name": "AddVignette",
      "file_path": "griptape_nodes_library/video/add_vignette.py",
      "metadata": {
        "category": "video",
        "description": "Add a vignette effect to video with adjustable lens angle, center position, and aspect ratio",
        "display_name": "Add Vignette",
        "icon": "circle-dot",
        "group": "effects"
      }
    },
    {
      "class_name": "ReverseVideo",
      "file_path": "griptape_nodes_library/video/reverse_video.py",
      "metadata": {
        "category": "video",
        "description": "Reverse video playback with options to reverse, mute, or keep original audio",
        "display_name": "Reverse Video",
        "icon": "rewind",
        "group": "effects"
      }
    },
    {
      "class_name": "FlipVideo",
      "file_path": "griptape_nodes_library/video/flip_video.py",
      "metadata": {
        "category": "video",
        "description": "Flip video horizontally, vertically, or both directions",
        "display_name": "Flip Video",
        "icon": "flip-horizontal",
        "group": "edit"
      }
    },
    {
      "class_name": "AdjustVideoEQ",
      "file_path": "griptape_nodes_library/video/adjust_video_eq.py",
      "metadata": {
        "category": "video",
        "description": "Adjust video brightness, contrast, saturation, and gamma with precise controls",
        "display_name": "Adjust Video EQ",
        "icon": "sliders",
        "group": "edit"
      }
    },
    {
      "class_name": "AddRGBShift",
      "file_path": "griptape_nodes_library/video/add_rgb_shift.py",
      "metadata": {
        "category": "video",
        "description": "Add RGB shift (chromatic aberration) effect with individual channel control, static or animated glitches, and VHS-style base effects with configurable noise, chroma shift, blur, and motion trails",
        "display_name": "Add RGB Shift",
        "icon": "palette",
        "group": "effects"
      }
    },
    {
      "class_name": "ChangeSpeed",
      "file_path": "griptape_nodes_library/video/change_speed.py",
      "metadata": {
        "category": "video",
        "description": "Change the playback speed of a video using FFmpeg's setpts filter with automatic audio speed adjustment",
        "display_name": "Change Speed",
        "icon": "zap",
        "group": "effects"
      }
    },
    {
      "class_name": "AddColorCurves",
      "file_path": "griptape_nodes_library/video/add_color_curves.py",
      "metadata": {
        "category": "video",
        "description": "Add color curves (color grading) effect to video using FFmpeg's curves filter with presets and custom curve options",
        "display_name": "Add Color Curves",
        "icon": "palette",
        "group": "effects"
      }
    },
    {
      "class_name": "AddOverlay",
      "file_path": "griptape_nodes_library/video/add_overlay.py",
      "metadata": {
        "category": "video",
        "description": "Add an overlay video on top of a base video using FFmpeg's overlay filter with alpha channel control",
        "display_name": "Add Overlay",
        "icon": "layers",
        "group": "merge"
      }
    },
    {
      "class_name": "ExtractLastFrame",
      "file_path": "griptape_nodes_library/video/extract_last_frame.py",
      "metadata": {
        "category": "video",
        "description": "Extract the last frame from a video and output it as an Image",
        "display_name": "Extract Last Frame",
        "icon": "film",
        "group": "describe"
      }
    },
    {
      "class_name": "ExtractAudio",
      "file_path": "griptape_nodes_library/video/extract_audio.py",
      "metadata": {
        "category": "video",
        "description": "Extract audio from a video and output it as an audio file with configurable format and quality settings",
        "display_name": "Extract Audio",
        "icon": "volume-2",
        "group": "describe"
      }
    },
    {
      "class_name": "ToBool",
      "file_path": "griptape_nodes_library/convert/to_bool.py",
      "metadata": {
        "category": "convert",
        "description": "Converts incoming value to a boolean",
        "display_name": "To Bool",
        "group": "edit"
      }
    },
    {
      "class_name": "ToDictionary",
      "file_path": "griptape_nodes_library/convert/to_dict.py",
      "metadata": {
        "category": "convert",
        "description": "Converts incoming value to a dictionary",
        "display_name": "To Dictionary",
        "group": "edit"
      }
    },
    {
      "class_name": "DictToList",
      "file_path": "griptape_nodes_library/convert/dict_to_list.py",
      "metadata": {
        "category": "convert",
        "description": "Extract lists of keys and values from a dictionary",
        "display_name": "Dict to List",
        "group": "edit"
      }
    },
    {
      "class_name": "JsonExtractValue",
      "file_path": "griptape_nodes_library/json/json_extract_value.py",
      "metadata": {
        "category": "json",
        "description": "Extract a value from JSON using dot notation path",
        "display_name": "JSON Extract Value",
        "icon": "search",
        "group": "describe"
      }
    },
    {
      "class_name": "JsonInput",
      "file_path": "griptape_nodes_library/json/json_input.py",
      "metadata": {
        "category": "json",
        "description": "Create a JSON node from input data",
        "display_name": "JSON Input",
        "icon": "file-json",
        "group": "create"
      }
    },
    {
      "class_name": "DisplayJson",
      "file_path": "griptape_nodes_library/json/display_json.py",
      "metadata": {
        "category": "json",
        "description": "Display JSON data with automatic repair and formatting",
        "display_name": "Display JSON",
        "icon": "eye",
        "group": "display"
      }
    },
    {
      "class_name": "JsonReplace",
      "file_path": "griptape_nodes_library/json/json_replace.py",
      "metadata": {
        "category": "json",
        "description": "Replace values in JSON using dot notation paths",
        "display_name": "JSON Replace",
        "icon": "edit",
        "group": "edit"
      }
    },
    {
      "class_name": "ToFloat",
      "file_path": "griptape_nodes_library/convert/to_float.py",
      "metadata": {
        "category": "convert",
        "description": "Converts incoming value to a float",
        "display_name": "To Float",
        "group": "edit"
      }
    },
    {
      "class_name": "ToInteger",
      "file_path": "griptape_nodes_library/convert/to_int.py",
      "display_name": "To Integer",
      "metadata": {
        "category": "convert",
        "description": "Converts incoming value to an integer",
        "display_name": "To Integer",
        "group": "edit"
      }
    },
    {
      "class_name": "ToText",
      "file_path": "griptape_nodes_library/convert/to_text.py",
      "metadata": {
        "category": "convert",
        "description": "Converts incoming value to text",
        "display_name": "To Text",
        "group": "edit"
      }
    },
    {
      "class_name": "ToJson",
      "file_path": "griptape_nodes_library/convert/to_json.py",
      "metadata": {
        "category": "convert",
        "description": "Converts incoming value to JSON data",
        "display_name": "To JSON",
        "group": "edit"
      }
    },
    {
      "class_name": "Dictionary",
      "file_path": "griptape_nodes_library/dict/create_dict.py",
      "metadata": {
        "category": "dict",
        "description": "Creates a dictionary from key-value pairs",
        "display_name": "Create Dictionary",
        "group": "create"
      }
    },
    {
      "class_name": "DisplayDictionary",
      "file_path": "griptape_nodes_library/dict/display_dict.py",
      "metadata": {
        "category": "dict",
        "description": "Displays dictionary data",
        "display_name": "Display Dictionary",
        "group": "display"
      }
    },
    {
      "class_name": "KeyValuePair",
      "file_path": "griptape_nodes_library/dict/key_value_pair.py",
      "metadata": {
        "category": "dict",
        "description": "Create a Key Value Pair",
        "display_name": "Key Value Pair",
        "group": "create"
      }
    },
    {
      "class_name": "LoadDictionary",
      "file_path": "griptape_nodes_library/dict/load_dict.py",
      "metadata": {
        "category": "dict",
        "description": "Loads a dictionary from disk",
        "display_name": "Load Dictionary",
        "group": "Input/Output",
        "icon": "file-up"
      }
    },
    {
      "class_name": "MergeKeyValuePairs",
      "file_path": "griptape_nodes_library/dict/merge_key_value_pair.py",
      "metadata": {
        "category": "dict",
        "description": "Merges multiple Key/Value Pairs into a single dictionary",
        "display_name": "Merge Key Value Pairs",
        "group": "merge"
      }
    },
    {
      "class_name": "SaveDictionary",
      "file_path": "griptape_nodes_library/dict/save_dict.py",
      "metadata": {
        "category": "dict",
        "description": "Save dictionary data to a file",
        "display_name": "Save Dictionary",
        "icon": "file-down",
        "group": "Input/Output"
      }
    },
    {
      "class_name": "DictGetValueByKey",
      "file_path": "griptape_nodes_library/dict/get_dict_value.py",
      "metadata": {
        "category": "dict",
        "description": "Get a value from a dictionary by key with optional default handling",
        "display_name": "Get Dictionary Value by Key",
        "icon": "key",
        "group": "describe"
      }
    },
    {
      "class_name": "DictHasValueForKey",
      "file_path": "griptape_nodes_library/dict/dict_has_value_for_key.py",
      "metadata": {
        "category": "dict",
        "description": "Check if a dictionary has a value for a specific key",
        "display_name": "Has Dictionary Value for Key",
        "icon": "search-check",
        "group": "describe"
      }
    },
    {
      "class_name": "GriptapeCloudImage",
      "file_path": "griptape_nodes_library/config/image/griptape_cloud_image_driver.py",
      "metadata": {
        "category": "image/image_models",
        "description": "Image Generation Models available from Griptape Cloud",
        "display_name": "Griptape Cloud Image",
        "icon": {
          "dark": "logos/griptape_cloud.svg",
          "light": "logos/griptape_cloud_dark.svg"
        },
        "group": "create"
      }
    },
    {
      "class_name": "GrokImage",
      "file_path": "griptape_nodes_library/config/image/grok_image_driver.py",
      "metadata": {
        "category": "image/image_models",
        "description": "Image Generation Models available from xAI Grok",
        "display_name": "Grok Image",
        "icon": {
          "dark": "logos/grok.svg",
          "light": "logos/grok_dark.svg"
        },
        "group": "create"
      }
    },
    {
      "class_name": "OpenAiImage",
      "file_path": "griptape_nodes_library/config/image/openai_image_driver.py",
      "metadata": {
        "category": "image/image_models",
        "description": "Image Generation Models available from OpenAI",
        "display_name": "Open Ai Image",
        "icon": {
          "dark": "logos/openai.svg",
          "light": "logos/openai_dark.svg"
        },
        "group": "create"
      }
    },
    {
      "class_name": "AmazonBedrockPrompt",
      "file_path": "griptape_nodes_library/config/prompt/amazon_bedrock_prompt.py",
      "metadata": {
        "category": "agents/prompt_models",
        "description": "Prompt Models available from Amazon Bedrock",
        "display_name": "Amazon Bedrock Prompt",
        "icon": {
          "dark": "logos/aws.svg",
          "light": "logos/aws_dark.svg"
        }
      }
    },
    {
      "class_name": "AnthropicPrompt",
      "file_path": "griptape_nodes_library/config/prompt/anthropic_prompt.py",
      "metadata": {
        "category": "agents/prompt_models",
        "description": "Prompt Models available from Anthropic",
        "display_name": "Anthropic Prompt",
        "icon": {
          "dark": "logos/anthropic.svg",
          "light": "logos/anthropic_dark.svg"
        }
      }
    },
    {
      "class_name": "CoherePrompt",
      "file_path": "griptape_nodes_library/config/prompt/cohere_prompt.py",
      "metadata": {
        "category": "agents/prompt_models",
        "description": "Prompt Models available from Cohere",
        "display_name": "Cohere Prompt",
        "icon": "logos/cohere.svg"
      }
    },
    {
      "class_name": "GriptapeCloudPrompt",
      "file_path": "griptape_nodes_library/config/prompt/griptape_cloud_prompt.py",
      "metadata": {
        "category": "agents/prompt_models",
        "description": "Prompt Models available from Griptape Cloud",
        "display_name": "Griptape Cloud Prompt",
        "icon": {
          "dark": "logos/griptape_cloud.svg",
          "light": "logos/griptape_cloud_dark.svg"
        }
      }
    },
    {
      "class_name": "GrokPrompt",
      "file_path": "griptape_nodes_library/config/prompt/grok_prompt.py",
      "metadata": {
        "category": "agents/prompt_models",
        "description": "Prompt Models available from xAI Grok",
        "display_name": "Grok Prompt",
        "icon": {
          "dark": "logos/grok.svg",
          "light": "logos/grok_dark.svg"
        }
      }
    },
    {
      "class_name": "GroqPrompt",
      "file_path": "griptape_nodes_library/config/prompt/groq_prompt.py",
      "metadata": {
        "category": "agents/prompt_models",
        "description": "Prompt Models available from Groq",
        "display_name": "Groq Prompt",
        "icon": {
          "dark": "logos/groq.svg",
          "light": "logos/groq_dark.svg"
        }
      }
    },
    {
      "class_name": "NimPrompt",
      "file_path": "griptape_nodes_library/config/prompt/nim_prompt.py",
      "metadata": {
        "category": "agents/prompt_models",
        "description": "Prompt Models available from NVIDIA",
        "display_name": "NIM Prompt"
      }
    },
    {
      "class_name": "OllamaPrompt",
      "file_path": "griptape_nodes_library/config/prompt/ollama_prompt_driver.py",
      "metadata": {
        "category": "agents/prompt_models",
        "description": "Prompt Models available from Ollama",
        "display_name": "Ollama Prompt",
        "icon": {
          "dark": "logos/ollama.svg",
          "light": "logos/ollama_dark.svg"
        }
      }
    },
    {
      "class_name": "OpenAiPrompt",
      "file_path": "griptape_nodes_library/config/prompt/openai_prompt.py",
      "metadata": {
        "category": "agents/prompt_models",
        "description": "Prompt Models available from OpenAi",
        "display_name": "Open Ai Prompt",
        "icon": {
          "dark": "logos/openai.svg",
          "light": "logos/openai_dark.svg"
        }
      }
    },
    {
      "class_name": "DisplayImage",
      "file_path": "griptape_nodes_library/image/display_image.py",
      "metadata": {
        "category": "image",
        "description": "Display an image",
        "display_name": "Display Image",
        "group": "display"
      }
    },
    {
      "class_name": "CompareImages",
      "file_path": "griptape_nodes_library/image/compare_images.py",
      "metadata": {
        "category": "image",
        "description": "Can be used to compare two images",
        "display_name": "Compare Images",
        "group": "display"
      }
    },
    {
      "class_name": "DescribeImage",
      "file_path": "griptape_nodes_library/image/describe_image.py",
      "metadata": {
        "category": "image",
        "description": "Can be used to describe an image",
        "display_name": "Describe Image",
        "group": "describe"
      }
    },
    {
      "class_name": "DisplayMask",
      "file_path": "griptape_nodes_library/image/display_mask.py",
      "metadata": {
        "category": "image",
        "description": "Display a mask from an image's alpha channel.",
        "display_name": "Display Mask",
        "group": "display"
      }
    },
    {
      "class_name": "DisplayChannel",
      "file_path": "griptape_nodes_library/image/display_channel.py",
      "metadata": {
        "category": "image",
        "description": "Display a channel from an image's color channels (red, green, blue, or alpha). Defaults to red channel. Outputs to 'output' parameter.",
        "display_name": "Display Channel",
        "group": "display"
      }
    },
    {
      "class_name": "GenerateImage",
      "file_path": "griptape_nodes_library/image/create_image.py",
      "metadata": {
        "category": "image",
        "description": "Generates an image using Griptape Cloud, or other provided image generation models",
        "display_name": "Generate Image",
        "group": "create"
      }
    },
    {
      "class_name": "SeedreamImageGeneration",
      "file_path": "griptape_nodes_library/image/seedream_image_generation.py",
      "metadata": {
        "category": "image",
        "description": "Generate images using Seedream models (seedream-4.0, seedream-3.0-t2i) via Griptape model proxy",
        "display_name": "Seedream Image Generation",
        "group": "create",
        "icon": "Sparkles"
      }
    },
    {
      "class_name": "FluxImageGeneration",
      "file_path": "griptape_nodes_library/image/flux_image_generation.py",
      "metadata": {
        "category": "image",
        "description": "Generate images using Flux models via Griptape model proxy",
        "display_name": "Flux Image Generation",
        "group": "create",
        "icon": "Zap"
      }
    },
    {
      "class_name": "AddTextToImage",
      "file_path": "griptape_nodes_library/image/add_text_to_image.py",
      "metadata": {
        "category": "image",
        "description": "Create an image with text rendered on it",
        "display_name": "Add Text to Image",
        "group": "create",
        "icon": "Type"
      }
    },
    {
      "class_name": "InvertMask",
      "file_path": "griptape_nodes_library/image/invert_mask.py",
      "metadata": {
        "category": "image",
        "description": "Invert a mask image.",
        "display_name": "Invert Mask",
        "group": "mask"
      }
    },
    {
      "class_name": "InvertImage",
      "file_path": "griptape_nodes_library/image/invert_image.py",
      "metadata": {
        "category": "image",
        "description": "Invert a full image (creates a negative).",
        "display_name": "Invert Image",
        "group": "edit"
      }
    },
    {
      "class_name": "LoadImage",
      "file_path": "griptape_nodes_library/image/load_image.py",
      "metadata": {
        "category": "image",
        "description": "Loads an image from disk",
        "display_name": "Load Image",
        "icon": "image-up",
        "group": "Input/Output"
      }
    },
    {
      "class_name": "CropImage",
      "file_path": "griptape_nodes_library/image/crop_image.py",
      "metadata": {
        "category": "image",
        "description": "Crop, zoom, rotate, and pan images with precise control over transformations",
        "display_name": "Crop Image",
        "icon": "crop",
        "group": "edit"
      }
    },
    {
      "class_name": "ImageBash",
      "file_path": "griptape_nodes_library/image/image_bash.py",
      "metadata": {
        "category": "image",
        "description": "Bash an image together with lots of other images",
        "display_name": "Image Bash",
        "icon": "images",
        "group": "merge"
      }
    },
    {
      "class_name": "MergeImages",
      "file_path": "griptape_nodes_library/image/merge_images.py",
      "metadata": {
        "category": "image",
        "description": "Merge images together in different layouts with grid options and dynamic image input list",
        "display_name": "Merge Images",
        "group": "merge",
        "icon": "squares-unite"
      }
    },
    {
      "class_name": "DisplayImageGrid",
      "file_path": "griptape_nodes_library/image/display_image_grid.py",
      "metadata": {
        "category": "image",
        "description": "Display multiple images in a grid or masonry layout with customizable styling options",
        "display_name": "Display Image Grid",
        "group": "display",
        "icon": "grid-3x3"
      }
    },
    {
      "class_name": "ApplyMask",
      "file_path": "griptape_nodes_library/image/apply_mask.py",
      "metadata": {
        "category": "image",
        "description": "Apply a mask to an image.",
        "display_name": "Apply Mask",
        "group": "mask"
      }
    },
    {
      "class_name": "PaintMask",
      "file_path": "griptape_nodes_library/image/paint_mask.py",
      "metadata": {
        "category": "image",
        "description": "Paint a mask on an image.",
        "display_name": "Paint Mask",
        "group": "mask"
      }
    },
    {
      "class_name": "ExtendCanvas",
      "file_path": "griptape_nodes_library/image/extend_canvas.py",
      "metadata": {
        "category": "image",
        "description": "Extend canvas around an image to fit target aspect ratios or custom dimensions",
        "display_name": "Extend Canvas",
        "icon": "frame",
        "group": "edit"
      }
    },
    {
      "class_name": "SaveImage",
      "file_path": "griptape_nodes_library/image/save_image.py",
      "metadata": {
        "category": "image",
        "description": "Save an image to a file",
        "display_name": "Save Image",
        "icon": "image-down",
        "group": "Input/Output"
      }
    },
    {
      "class_name": "Webcam",
      "file_path": "griptape_nodes_library/image/webcam.py",
      "metadata": {
        "category": "image",
        "description": "Capture an image using the device's camera",
        "display_name": "Webcam",
        "icon": "webcam",
        "group": "create"
      }
    },
    {
      "class_name": "RescaleImage",
      "file_path": "griptape_nodes_library/image/rescale_image.py",
      "metadata": {
        "category": "image",
        "description": "Rescale images with separate parameters for target size (pixels) and percentage scale, plus resample filter options",
        "display_name": "Rescale Image",
        "icon": "image-upscale",
        "group": "edit"
      }
    },
    {
      "class_name": "AdjustImageEQ",
      "file_path": "griptape_nodes_library/image/adjust_image_eq.py",
      "metadata": {
        "category": "image",
        "description": "Adjust image brightness, contrast, saturation, and gamma using PIL's ImageEnhance with precise controls",
        "display_name": "Adjust Image EQ",
        "icon": "sliders",
        "group": "edit"
      }
    },
    {
      "class_name": "AdjustImageLevels",
      "file_path": "griptape_nodes_library/image/adjust_image_levels.py",
      "metadata": {
        "category": "image",
        "description": "Adjust image levels similar to Photoshop's levels adjustment with input levels (shadows, midtones, highlights) and output levels",
        "display_name": "Adjust Image Levels",
        "icon": "bar-chart-3",
        "group": "edit"
      }
    },
    {
      "class_name": "BloomEffect",
      "file_path": "griptape_nodes_library/image/bloom_effect.py",
      "metadata": {
        "category": "image",
        "description": "Apply a beautiful bloom/glow effect to images with configurable intensity and radius for dreamy, ethereal results",
        "display_name": "Bloom Effect",
        "icon": "sparkles",
        "group": "effects"
      }
    },
    {
      "class_name": "ImageBlendCompositor",
      "file_path": "griptape_nodes_library/image/image_blend_compositor.py",
      "metadata": {
        "category": "image",
        "description": "Compose two images using various blend modes with positioning and advanced compositing options for creative image manipulation",
        "display_name": "Image Blend Compositor",
        "icon": "layers",
        "group": "merge"
      }
    },
    {
      "class_name": "Note",
      "file_path": "griptape_nodes_library/note.py",
      "metadata": {
        "category": "misc",
        "description": "Create a note node to provide helpful context in your workflow",
        "display_name": "Note",
        "icon": "notepad-text",
        "group": "create"
      }
    },
    {
      "class_name": "ColorPickerNode",
      "file_path": "griptape_nodes_library/misc/color_picker.py",
      "metadata": {
        "category": "misc",
        "description": "Create a color picker node to select a color in various formats",
        "display_name": "ColorPicker",
        "icon": "pipette",
        "group": "create"
      }
    },
    {
      "class_name": "Askulator",
      "file_path": "griptape_nodes_library/number/askulator.py",
      "metadata": {
        "category": "number",
        "description": "Askulator was once a humble desk calculator in a university math lab. One day, lightning struck the building during a particularly spicy differential equations final. Now imbued with the power of language... and attitude... it nodes among us. Solving math, interpreting riddles, and offering just a hint of sarcasm.",
        "display_name": "Askulator",
        "icon": "message-circle-question-mark",
        "group": "tasks"
      }
    },
    {
      "class_name": "FloatInput",
      "file_path": "griptape_nodes_library/number/create_float.py",
      "metadata": {
        "category": "number",
        "description": "Create a float value",
        "display_name": "Float Input",
        "icon": "decimals-arrow-right",
        "group": "create"
      }
    },
    {
      "class_name": "IntegerInput",
      "file_path": "griptape_nodes_library/number/create_int.py",
      "metadata": {
        "category": "number",
        "description": "Create an integer value",
        "display_name": "Integer Input",
        "group": "create"
      }
    },
    {
      "class_name": "DisplayFloat",
      "file_path": "griptape_nodes_library/number/display_float.py",
      "metadata": {
        "category": "number",
        "description": "Display a float value",
        "display_name": "Display Float",
        "group": "display"
      }
    },
    {
      "class_name": "DisplayInteger",
      "file_path": "griptape_nodes_library/number/display_int.py",
      "metadata": {
        "category": "number",
        "description": "Display an integer value",
        "display_name": "Display Integer",
        "group": "display"
      }
    },
    {
      "class_name": "Math",
      "file_path": "griptape_nodes_library/number/math.py",
      "metadata": {
        "category": "number",
        "description": "Perform mathematical operations on numbers",
        "display_name": "Math",
        "icon": "calculator",
        "group": "tasks"
      }
    },
    {
      "class_name": "Ruleset",
      "file_path": "griptape_nodes_library/rules/create_ruleset.py",
      "metadata": {
        "category": "agents/rules",
        "description": "Give an agent a set of rules and behaviors to follow",
        "display_name": "Ruleset",
        "group": "create"
      }
    },
    {
      "class_name": "RulesetList",
      "file_path": "griptape_nodes_library/rules/ruleset_list.py",
      "metadata": {
        "category": "agents/rules",
        "description": "Combine rulesets to give an agent a more complex set of behaviors",
        "display_name": "Ruleset List",
        "group": "create"
      }
    },
    {
      "class_name": "LoadText",
      "file_path": "griptape_nodes_library/text/load_text.py",
      "metadata": {
        "category": "text",
        "description": "LoadText node",
        "display_name": "Load Text",
        "icon": "file-text",
        "group": "Input/Output"
      }
    },
    {
      "class_name": "MergeTexts",
      "file_path": "griptape_nodes_library/text/merge_texts.py",
      "metadata": {
        "category": "text",
        "description": "MergeTexts node",
        "display_name": "Merge Texts",
        "icon": "merge",
        "group": "merge"
      }
    },
    {
      "class_name": "RandomText",
      "file_path": "griptape_nodes_library/text/random_text.py",
      "metadata": {
        "category": "text",
        "description": "Selects a random character, word, sentence, or paragraph from input text, or generates random content if no input is provided.",
        "display_name": "Random Text",
        "icon": "dices",
        "group": "tasks"
      }
    },
    {
      "class_name": "DateAndTime",
      "file_path": "griptape_nodes_library/text/date_and_time.py",
      "metadata": {
        "category": "text",
        "description": "Get the date and time",
        "display_name": "Date and Time",
        "icon": "calendar",
        "group": "tasks"
      }
    },
    {
      "class_name": "DisplayText",
      "file_path": "griptape_nodes_library/text/display_text.py",
      "metadata": {
        "category": "text",
        "description": "DisplayText node",
        "display_name": "Display Text",
        "group": "display"
      }
    },
    {
      "class_name": "DisplayTextAsMarkdown",
      "file_path": "griptape_nodes_library/text/display_text_as_markdown.py",
      "metadata": {
        "category": "text",
        "description": "Displays text as markdown",
        "display_name": "Display Text As Markdown",
        "group": "display"
      }
    },
    {
      "class_name": "EvaluateTextResult",
      "file_path": "griptape_nodes_library/text/evaluate_text_result.py",
      "metadata": {
        "category": "text",
        "description": "Evaluate the results of some text against some criteria",
        "display_name": "Evaluate Text Result",
        "group": "describe"
      }
    },
    {
      "class_name": "SaveText",
      "file_path": "griptape_nodes_library/text/save_text.py",
      "metadata": {
        "category": "text",
        "description": "Save text to a file",
        "display_name": "Save Text",
        "icon": "file-down",
        "group": "Input/Output"
      }
    },
    {
      "class_name": "ScrapeWeb",
      "file_path": "griptape_nodes_library/text/scrape_web.py",
      "metadata": {
        "category": "text",
        "description": "Scrape the web for information",
        "display_name": "Scrape Web",
        "icon": "globe",
        "group": "Input/Output"
      }
    },
    {
      "class_name": "SearchReplaceText",
      "file_path": "griptape_nodes_library/text/search_replace_text.py",
      "metadata": {
        "category": "text",
        "description": "Perform search and replace operations on text content with support for regex and case sensitivity",
        "display_name": "Search Replace Text",
        "icon": "regex",
        "group": "edit"
      }
    },
    {
      "class_name": "SearchWeb",
      "file_path": "griptape_nodes_library/text/search_web.py",
      "metadata": {
        "category": "text",
        "description": "Search the web for information",
        "display_name": "Search Web",
        "icon": "binoculars",
        "group": "Input/Output"
      }
    },
    {
      "class_name": "SummarizeText",
      "file_path": "griptape_nodes_library/text/summarize_text_task.py",
      "metadata": {
        "category": "text",
        "description": "Summarize text",
        "display_name": "Summarize Text",
        "icon": "message-square-text",
        "group": "describe"
      }
    },
    {
      "class_name": "TextInput",
      "file_path": "griptape_nodes_library/text/create_multiline_text.py",
      "metadata": {
        "category": "text",
        "description": "TextInput node",
        "display_name": "Text Input",
        "icon": "text-cursor",
        "group": "create"
      }
    },
    {
      "class_name": "FilePathValidator",
      "file_path": "griptape_nodes_library/text/file_path_validator.py",
      "metadata": {
        "category": "text",
        "description": "Validates that file paths exist and are readable Python files",
        "display_name": "File Path Validator",
        "icon": "file-check"
      }
    },
    {
      "class_name": "Calculator",
      "file_path": "griptape_nodes_library/tools/calculator_tool.py",
      "metadata": {
        "category": "agents/tools",
        "description": "Give an agent the ability to use a calculator",
        "display_name": "Calculator",
        "icon": "calculator",
        "group": "create"
      }
    },
    {
      "class_name": "DateTime",
      "file_path": "griptape_nodes_library/tools/date_time_tool.py",
      "metadata": {
        "category": "agents/tools",
        "description": "Give an agent the ability to know what day and time it is",
        "display_name": "Date Time",
        "icon": "calendar",
        "group": "create"
      }
    },
    {
      "class_name": "FileManager",
      "file_path": "griptape_nodes_library/tools/file_manager_tool.py",
      "metadata": {
        "category": "agents/tools",
        "description": "Give an agent the ability to load files from disk",
        "display_name": "File Manager",
        "icon": "folder",
        "group": "create"
      }
    },
    {
      "class_name": "MCPToolNode",
      "file_path": "griptape_nodes_library/tools/mcp_tool.py",
      "metadata": {
        "category": "agents/tools",
        "description": "Give an agent the ability to use an MCP tool",
        "display_name": "MCP Tool",
        "icon": "bolt",
        "group": "create"
      }
    },
    {
      "class_name": "MCPTaskNode",
      "file_path": "griptape_nodes_library/tasks/mcp_task.py",
      "metadata": {
        "category": "agents",
        "description": "Give an agent the ability to use an MCP tool",
        "display_name": "MCP Task",
        "icon": "bolt",
        "group": "create"
      }
    },
    {
      "class_name": "ToolList",
      "file_path": "griptape_nodes_library/tools/tool_list.py",
      "metadata": {
        "category": "agents/tools",
        "description": "Combine tools to give an agent a more complex set of tools",
        "display_name": "Tool List",
        "icon": "list-check",
        "group": "create"
      }
    },
    {
      "class_name": "WebSearch",
      "file_path": "griptape_nodes_library/tools/web_search_tool.py",
      "metadata": {
        "category": "agents/tools",
        "description": "Give an agent the ability to search the web",
        "display_name": "Web Search",
        "icon": "binoculars",
        "group": "create"
      }
    },
    {
      "class_name": "WebScraper",
      "file_path": "griptape_nodes_library/tools/web_scraper_tool.py",
      "metadata": {
        "category": "agents/tools",
        "description": "Give an agent the ability to scrape the web for information",
        "display_name": "Web Scraper",
        "icon": "globe",
        "group": "create"
      }
    },
    {
      "class_name": "StartFlow",
      "file_path": "griptape_nodes_library/workflows/start_flow.py",
      "metadata": {
        "category": "workflows",
        "description": "Define the start of a workflow and pass parameters into the flow",
        "display_name": "Start Flow",
        "group": "create"
      }
    },
    {
      "class_name": "EndFlow",
      "file_path": "griptape_nodes_library/workflows/end_flow.py",
      "metadata": {
        "category": "workflows",
        "description": "Define the end of a workflow and return parameters from the flow",
        "display_name": "End Flow",
        "group": "create"
      }
    },
    {
      "class_name": "Reroute",
      "file_path": "griptape_nodes_library/execution/reroute.py",
      "metadata": {
        "category": "execution_flow",
        "description": "Provides a node to allow you to redirect a flow, matching inputs and outputs",
        "display_name": "Reroute",
        "group": "flow control"
      }
    },
    {
      "class_name": "IfElse",
      "file_path": "griptape_nodes_library/execution/if_else.py",
      "metadata": {
        "category": "execution_flow",
        "description": "Create a branching workflow based on whether a value is true or false",
        "display_name": "IfElse",
        "group": "comparison"
      }
    },
    {
      "class_name": "CompareNumbers",
      "file_path": "griptape_nodes_library/execution/compare_numbers.py",
      "metadata": {
        "category": "execution_flow",
        "description": "Branch your workflow based on a comparison of two numbers",
        "display_name": "Compare Numbers",
        "group": "comparison"
      }
    },
    {
      "class_name": "CompareStrings",
      "file_path": "griptape_nodes_library/execution/compare_strings.py",
      "metadata": {
        "category": "execution_flow",
        "description": "Branch your workflow based on a comparison of two strings",
        "display_name": "Compare Strings",
        "group": "comparison"
      }
    },
    {
      "class_name": "OutputSelector",
      "file_path": "griptape_nodes_library/execution/select_output.py",
      "metadata": {
        "category": "execution_flow",
        "description": "Let's you choose which direction you want a flow to go, based on the output of previous nodes",
        "display_name": "Output Selector",
        "group": "flow control"
      }
    },
    {
      "class_name": "ForEachStartNode",
      "file_path": "griptape_nodes_library/execution/for_each_start.py",
      "metadata": {
        "category": "execution_flow",
        "description": "Start node for iterating through a list of items and running a flow for each one",
        "display_name": "ForEach Start",
        "icon": "list-start",
        "group": "iteration"
      }
    },
    {
      "class_name": "ForEachEndNode",
      "file_path": "griptape_nodes_library/execution/for_each_end.py",
      "metadata": {
        "category": "execution_flow",
        "description": "End node that completes a loop iteration and connects back to the ForEachStartNode",
        "display_name": "ForEach End",
        "icon": "list-end",
        "group": "iteration"
      }
    },
    {
      "class_name": "AgentToTool",
      "file_path": "griptape_nodes_library/convert/agent_to_tool.py",
      "metadata": {
        "category": "convert",
        "description": "Convert an agent into a tool that another agent can use",
        "display_name": "Agent To Tool",
        "group": "edit"
      }
    },
    {
      "class_name": "LoadGLTF",
      "file_path": "griptape_nodes_library/three_d/load_gltf.py",
      "metadata": {
        "category": "3D",
        "description": "Loads a GLTF file into your workflow",
        "display_name": "Load GLTF",
        "group": "Input/Output"
      }
    },
    {
      "class_name": "LoadThreeD",
      "file_path": "griptape_nodes_library/three_d/load_three_d.py",
      "metadata": {
        "category": "3D",
        "description": "Loads a 3D file into your workflow",
        "display_name": "Load 3D",
        "group": "Input/Output"
      }
    },
    {
      "class_name": "ForLoopStartNode",
      "file_path": "griptape_nodes_library/execution/for_loop_start.py",
      "metadata": {
        "category": "execution_flow",
        "description": "Start node for iterating through a range of numbers with a specified step value",
        "display_name": "For Loop Start",
        "icon": "repeat",
        "group": "iteration"
      }
    },
    {
      "class_name": "ForLoopEndNode",
      "file_path": "griptape_nodes_library/execution/for_loop_end.py",
      "metadata": {
        "category": "execution_flow",
        "description": "End node that completes a loop iteration and connects back to the ForLoopStartNode",
        "display_name": "For Loop End",
        "icon": "repeat",
        "group": "iteration"
      }
    },
    {
      "class_name": "CancelWorkflow",
      "file_path": "griptape_nodes_library/execution/cancel_workflow.py",
      "metadata": {
        "category": "execution_flow",
        "description": "Cancel the workflow execution with a custom reason",
        "display_name": "Cancel Workflow",
        "icon": "x-circle",
        "group": "flow control"
      }
    },
    {
      "class_name": "CreateVariable",
      "file_path": "griptape_nodes_library/variables/create_variable.py",
      "metadata": {
        "category": "variables",
        "description": "Create or update a variable with a specified name, type, and value. Creates new variables or updates existing ones intelligently.",
        "display_name": "Create Variable",
        "icon": "PlusCircle",
        "group": "create"
      }
    },
    {
      "class_name": "GetVariable",
      "file_path": "griptape_nodes_library/variables/get_variable.py",
      "metadata": {
        "category": "variables",
        "description": "Retrieve the value of an existing variable",
        "display_name": "Get Variable",
        "icon": "ArrowDown",
        "group": "describe"
      }
    },
    {
      "class_name": "SetVariable",
      "file_path": "griptape_nodes_library/variables/set_variable.py",
      "metadata": {
        "category": "variables",
        "description": "Set the value of an existing variable",
        "display_name": "Set Variable",
        "icon": "ArrowUp",
        "group": "edit"
      }
    },
    {
      "class_name": "HasVariable",
      "file_path": "griptape_nodes_library/variables/has_variable.py",
      "metadata": {
        "category": "variables",
        "description": "Check whether a variable exists",
        "display_name": "Has Variable",
        "icon": "QuestionMarkCircle",
        "group": "describe"
      }
    }
  ],
  "workflows": [
    "workflows/templates/prompt_an_image.py",
    "workflows/templates/coordinating_agents.py",
    "workflows/templates/compare_prompts.py",
    "workflows/templates/photography_team.py"
  ],
  "is_default_library": true
}