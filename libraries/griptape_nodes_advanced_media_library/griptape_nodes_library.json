{
  "name": "Griptape Nodes Advanced Media Library",
  "library_schema_version": "0.1.0",
  "metadata": {
    "author": "Griptape, Inc.",
    "description": "Advanced media generation and manipulation nodes for Griptape Nodes.",
    "library_version": "0.34.0",
    "engine_version": "0.34.0",
    "tags": [
      "Griptape",
      "AI"
    ],
    "dependencies": {
      "pip_dependencies": [
        "accelerate>=1.6.0",
        "controlnet-aux>=0.0.9",
        "imageio-ffmpeg>=0.6.0",
        "git+https://github.com/huggingface/diffusers.git",
        "numpy>=2.2.4",
        "opencv-python>=4.11.0.86",
        "peft>=0.15.2",
        "pillow>=11.2.1",
        "protobuf>=6.30.2",
        "sentencepiece>=0.2.0",
        "spandrel>=0.4.1",
        "torch>=2.7.0",
        "torchvision>=0.22.0",
        "torchaudio>=2.7.0",
        "transformers>=4.51.2",
        "tqdm>=4.67.1",
        "protobuf>=6.31.0",
        "prodigyopt>=1.1.2; sys_platform == 'win32'",
        "bitsandbytes>=0.46.0; sys_platform == 'win32'",
        "ftfy>=6.3.1"
      ],
      "pip_install_flags": [
        "--preview",
        "--torch-backend=auto"
      ]
    }
  },
  "categories": [
  ],
  "nodes": [
    {
      "class_name": "GrayscaleConvertImage",
      "file_path": "pillow_nodes_library/grayscale_convert_image.py",
      "metadata": {
        "category": "image",
        "description": "Desaturate an image via the üõèÔ∏è pillow python package. Pairs well with ControlNet Image Generation in grayscale mode.",
        "display_name": "Desaturate"
      }
    },
    {
      "class_name": "GaussianBlurImage",
      "file_path": "pillow_nodes_library/gaussian_blur_image.py",
      "metadata": {
        "category": "image",
        "description": "Apply a gaussian blur to an image with the üõèÔ∏è pillow python package. Pairs well with ControlNet Image Generation in blur or tile mode.",
        "display_name": "Gaussian Blur"
      }
    },
    {
      "class_name": "DepthAnythingForDepthEstimation",
      "file_path": "transformers_nodes_library/depth_anything_for_depth_estimation.py",
      "metadata": {
        "category": "image/depth",
        "description": "Generate a Depth Map with Depth Anything V2 and ü§ó Transformers Pairs well with ControlNet Image Generation in depth mode.",
        "display_name": "Depth Anything V2"
      }
    },
    {
      "class_name": "CannyConvertImage",
      "file_path": "opencv_nodes_library/canny_convert_image.py",
      "metadata": {
        "category": "image/edge",
        "description": "Detect Edges with OpenCV. Pairs well with ControlNet Image Generation in edge mode.",
        "display_name": "Detect Edges with OpenCV"
      }
    },
    {
      "class_name": "AnylineDetector",
      "file_path": "controlnet_aux_nodes_library/anyline_detector.py",
      "metadata": {
        "category": "image/edge",
        "description": "Detect Edges with Anyline. Pairs well with ControlNet Image Generation in edge mode.",
        "display_name": "Detect Edges with Anyline"
      }
    },
    {
      "class_name": "FluxPipeline",
      "file_path": "diffusers_nodes_library/pipelines/flux/flux_pipeline.py",
      "metadata": {
        "category": "image/flux",
        "description": "Generate an Image with Flux via ü§ó Diffusers.",
        "display_name": "Flux"
      }
    },
    {
      "class_name": "FluxFillPipeline",
      "file_path": "diffusers_nodes_library/pipelines/flux/flux_fill_pipeline.py",
      "metadata": {
        "category": "image/flux",
        "description": "Generate an umasked portion of an Image with Flux via ü§ó Diffusers.",
        "display_name": "Flux Fill"
      }
    },
    {
      "class_name": "DiptychFluxFillPipeline",
      "file_path": "diffusers_nodes_library/pipelines/flux/diptych_flux_fill_pipeline.py",
      "metadata": {
        "category": "image/flux",
        "description": "Generate a pompt-controlled Image Variation with Flux via ü§ó Diffusers. Pairs best with the RiverZ Flux Lora. Project page (paper, demos, gallery): https://river-zhang.github.io/ICEdit-gh-pages/",
        "display_name": "Flux ICEdit "
      }
    },
    {
      "class_name": "UnionFluxControlNetPipeline",
      "file_path": "diffusers_nodes_library/pipelines/flux/controlnet/union_flux_control_net_pipeline.py",
      "metadata": {
        "category": "image/flux/controlnet",
        "description": "Generate a Image with Flux + ControlNet via ü§ó Diffusers. ü§ó Model Card: https://huggingface.co/InstantX/FLUX.1-dev-Controlnet-Union",
        "display_name": "Flux CN Union"
      }
    },
    {
      "class_name": "UnionProFluxControlNetPipeline",
      "file_path": "diffusers_nodes_library/pipelines/flux/controlnet/union_pro_flux_control_net_pipeline.py",
      "metadata": {
        "category": "image/flux/controlnet",
        "description": "Generate a Image with Flux + ControlNet via ü§ó Diffusers. ü§ó Model Card: https://huggingface.co/Shakker-Labs/FLUX.1-dev-ControlNet-Union-Pro",
        "display_name": "Flux CN Union Pro"
      }
    },
    {
      "class_name": "UnionProTwoFluxControlNetPipeline",
      "file_path": "diffusers_nodes_library/pipelines/flux/controlnet/union_pro_two_flux_control_net_pipeline.py",
      "metadata": {
        "category": "image/flux/controlnet",
        "description": "Generate a Image with Flux + ControlNet via ü§ó Diffusers. ü§ó Model Card: https://huggingface.co/Shakker-Labs/FLUX.1-dev-ControlNet-Union-Pro-2.0",
        "display_name": "Flux CN Union Pro 2"
      }
    },
    {
      "class_name": "FluxLoraFromFile",
      "file_path": "diffusers_nodes_library/pipelines/flux/lora/flux_lora_from_file.py",
      "metadata": {
        "category": "image/flux/loras",
        "description": "Load Flux Lora from File for use with ü§ó Diffusers based Flux Nodes. Path must be on the engine's filesystem.",
        "display_name": "Flux Lora File"
      }
    },
    {
      "class_name": "LumatalesFluxLora",
      "file_path": "diffusers_nodes_library/pipelines/flux/lora/lumatales_flux_lora.py",
      "metadata": {
        "category": "image/flux/loras",
        "description": "Load the Flux Lora for use with ü§ó Diffusers based Flux Nodes. ü§ó Model Card: https://huggingface.co/Shakker-Labs/Lumatales-FL",
        "display_name": "Flux Lora: Lumatales-FL "
      }
    },
    {
      "class_name": "MicroLandscapeOnPhoneFluxLora",
      "file_path": "diffusers_nodes_library/pipelines/flux/lora/micro_landscape_on_phone_flux_lora.py",
      "metadata": {
        "category": "image/flux/loras",
        "description": "Load the Flux Lora for use with ü§ó Diffusers based Flux Nodes. ü§ó Model Card: https://huggingface.co/Shakker-Labs/FLUX.1-dev-LoRA-Micro-landscape-on-Mobile-Phone",
        "display_name": "Flux Lora: Micro Landscape on Mobile Phone"
      }
    },
    {
      "class_name": "MiniatureWorldFluxLora",
      "file_path": "diffusers_nodes_library/pipelines/flux/lora/miniature_world_flux_lora.py",
      "metadata": {
        "category": "image/flux/loras",
        "description": "Load the Flux Lora for use with ü§ó Diffusers based Flux Nodes. ü§ó Model Card: https://huggingface.co/Shakker-Labs/FLUX.1-dev-LoRA-Miniature-World",
        "display_name": "Flux Lora: Miniature World"
      }
    },
    {
      "class_name": "RiverZNormalDiptychFluxFillLora",
      "file_path": "diffusers_nodes_library/pipelines/flux/lora/river_z_normal_diptych_flux_fill_lora.py",
      "metadata": {
        "category": "image/flux/loras",
        "description": "Load the Flux Lora for use with the ICEdit Image with Flux Node. ü§ó Model Card:https://huggingface.co/RiverZ/normal-lora",
        "display_name": "Flux ICEdit Lora: RiverZ Normal"
      }
    },
    {
      "class_name": "TilingFluxImg2ImgPipeline",
      "file_path": "diffusers_nodes_library/pipelines/flux/tiling_flux_img_2_img_pipeline.py",
      "metadata": {
        "category": "image/upscale",
        "description": "Generate Image Variation with Flux via ü§ó Diffusers using a tiling strategy that allows efficient processing of hi-res images. Without the tiling the quadratic cost of transformer models will consume your GPU and time.",
        "display_name": "Flux Post-Upscale"
      }
    },
    {
      "class_name": "RescaleImage",
      "file_path": "pillow_nodes_library/rescale_image.py",
      "metadata": {
        "category": "image/upscale",
        "description": "Rescales an image using the üõèÔ∏è pillow python package.",
        "display_name": "Rescale Image"
      }
    },
    
    {
      "class_name": "TilingSPAN",
      "file_path": "spandrel_nodes_library/tiling_span.py",
      "metadata": {
        "category": "image/upscale",
        "description": "Upscales an image using the SPAN model via the ü•û spandrel python package. Pairs well with Generate Image Variation with Flux + Tiling.",
        "display_name": "SPAN Upscale"
      }
    },
    {
      "class_name": "TrainFluxLora",
      "file_path": "diffusers_nodes_library/pipelines/flux/peft/train_flux_lora.py",
      "metadata": {
        "category": "image/flux/loras",
        "description": "TrainFluxLora node.",
        "display_name": "Train Flux Lora"
      }
    },
    {
      "class_name": "WanPipeline",
      "file_path": "diffusers_nodes_library/pipelines/wan/wan_pipeline.py",
      "metadata": {
        "category": "video/wan",
        "description": "Generate videos from text with Wan",
        "display_name": "Wan T2V"
      }
    },
    {
      "class_name": "Kijai1Dot3BWanLora",
      "file_path": "diffusers_nodes_library/pipelines/wan/lora/kijai_1_dot_3_b_wan_lora.py",
      "metadata": {
        "category": "video/wan/loras",
        "description": "Experimental LoRA extractions from CausVid finetunes. Enables generating videos in 2-8 steps.",
        "display_name": "Kijai CausVid 1.3B"
      }
    },
    {
      "class_name": "Kijai14BWanLora",
      "file_path": "diffusers_nodes_library/pipelines/wan/lora/kijai_14_b_wan_lora.py",
      "metadata": {
        "category": "video/wan/loras",
        "description": "Experimental LoRA extractions from CausVid finetunes. Enables generating videos in 2-8 steps.",
        "display_name": "Kijai CausVid 14B"
      }
    },
    {
      "class_name": "WanImageToVideoPipeline",
      "file_path": "diffusers_nodes_library/pipelines/wan/wan_image_to_video_pipeline.py",
      "metadata": {
        "category": "video/wan",
        "description": "Generate videos from image and text with Wan",
        "display_name": "Wan I2V"
      }
    },
    {
      "class_name": "Kandinsky3Pipeline",
      "file_path": "diffusers_nodes_library/pipelines/kandinsky3/kandinsky3_pipeline.py",
      "metadata": {
        "category": "image/kandinsky3",
        "description": "Generate an Image with Kandinsky 3 via ü§ó Diffusers.",
        "display_name": "Kandinsky 3"
      }
    },
    {
      "class_name": "AllegroPipeline",
      "file_path": "diffusers_nodes_library/pipelines/allegro/allegro_pipeline.py",
      "metadata": {
        "category": "video/allegro",
        "description": "Generate a video with Allegro via ü§ó Diffusers.",
        "display_name": "Allegro"
      }
    },
    {
      "class_name": "AmusedPipeline",
      "file_path": "diffusers_nodes_library/pipelines/amused/amused_pipeline.py",
      "metadata": {
        "category": "image/amused",
        "description": "Generate an Image with aMUSEd via ü§ó Diffusers.",
        "display_name": "aMUSEd"
      }
    },
    {
      "class_name": "AnimateDiffPipeline",
      "file_path": "diffusers_nodes_library/pipelines/animatediff/animatediff_pipeline.py",
      "metadata": {
        "category": "video/animatediff",
        "description": "Generate a Video with AnimateDiff via ü§ó Diffusers.",
        "display_name": "AnimateDiff"
      }
    },
    {
      "class_name": "AudioldmPipeline",
      "file_path": "diffusers_nodes_library/pipelines/audioldm/audioldm_pipeline.py",
      "metadata": {
        "category": "audio/audioldm",
        "description": "Generate audio from text via ü§ó Diffusers.",
        "display_name": "AudioLDM"
      }
    },
    {
      "class_name": "Audioldm2Pipeline",
      "file_path": "diffusers_nodes_library/pipelines/audioldm2/audioldm2_pipeline.py",
      "metadata": {
        "category": "audio/audioldm2",
        "description": "Generate audio from text via ü§ó Diffusers.",
        "display_name": "AudioLDM 2"
      }
    },
    {
      "class_name": "AuraFlowPipeline",
      "file_path": "diffusers_nodes_library/pipelines/aura_flow/aura_flow_pipeline.py",
      "metadata": {
        "category": "image/aura_flow",
        "description": "Generate an Image with AuraFlow via ü§ó Diffusers.",
        "display_name": "AuraFlow"
      }
    },
    {
      "class_name": "BlipDiffusionPipeline",
      "file_path": "diffusers_nodes_library/pipelines/blip_diffusion/blip_diffusion_pipeline.py",
      "metadata": {
        "category": "image/blip_diffusion",
        "description": "Generate an Image with BLIP-Diffusion via ü§ó Diffusers.",
        "display_name": "BLIP-Diffusion"
      }
    },
    {
      "class_name": "CogvideoPipeline",
      "file_path": "diffusers_nodes_library/pipelines/cogvideo/cogvideo_pipeline.py",
      "metadata": {
        "category": "video/cogvideo",
        "description": "Generate a Video with CogVideo via ü§ó Diffusers.",
        "display_name": "CogVideo"
      }
    },
    {
      "class_name": "Cogview3Pipeline",
      "file_path": "diffusers_nodes_library/pipelines/cogview3/cogview3_pipeline.py",
      "metadata": {
        "category": "image/cogview3",
        "description": "Generate an Image with CogView3Plus via ü§ó Diffusers.",
        "display_name": "CogView3Plus"
      }
    },
    {
      "class_name": "Cogview4Pipeline",
      "file_path": "diffusers_nodes_library/pipelines/cogview4/cogview4_pipeline.py",
      "metadata": {
        "category": "image/cogview4",
        "description": "Generate an Image with CogView4 via ü§ó Diffusers.",
        "display_name": "CogView4"
      }
    },
    {
      "class_name": "ConsisidPipeline",
      "file_path": "diffusers_nodes_library/pipelines/consisid/consisid_pipeline.py",
      "metadata": {
        "category": "video/consisid",
        "description": "Generate identity-preserving video from image and text via ü§ó Diffusers.",
        "display_name": "ConsisID"
      }
    },
    {
      "class_name": "ConsistencyModelsPipeline",
      "file_path": "diffusers_nodes_library/pipelines/consistency_models/consistency_models_pipeline.py",
      "metadata": {
        "category": "image/consistency_models",
        "description": "Generate images with fast one-step or multi-step Consistency Models via ü§ó Diffusers.",
        "display_name": "Consistency Models"
      }
    },
    {
      "class_name": "ControlnetPipeline",
      "file_path": "diffusers_nodes_library/pipelines/controlnet/controlnet_pipeline.py",
      "metadata": {
        "category": "image/controlnet",
        "description": "Generate images with ControlNet via ü§ó Diffusers.",
        "display_name": "ControlNet"
      }
    },
    {
      "class_name": "ControlnetHunyuanditPipeline",
      "file_path": "diffusers_nodes_library/pipelines/controlnet_hunyuandit/controlnet_hunyuandit_pipeline.py",
      "metadata": {
        "category": "image/controlnet_hunyuandit",
        "description": "Generate images with HunyuanDiT ControlNet via ü§ó Diffusers.",
        "display_name": "ControlNet HunyuanDiT"
      }
    },
    {
      "class_name": "ControlnetSd3Pipeline",
      "file_path": "diffusers_nodes_library/pipelines/controlnet_sd3/controlnet_sd3_pipeline.py",
      "metadata": {
        "category": "image/controlnet_sd3",
        "description": "Generate images with SD3 ControlNet via ü§ó Diffusers.",
        "display_name": "ControlNet SD3"
      }
    },
    {
      "class_name": "ControlnetXsPipeline",
      "file_path": "diffusers_nodes_library/pipelines/controlnet_xs/controlnet_xs_pipeline.py",
      "metadata": {
        "category": "image/controlnet_xs",
        "description": "Generate images with ControlNet-XS via ü§ó Diffusers.",
        "display_name": "ControlNet XS"
      }
    },
    {
      "class_name": "CosmosPipeline",
      "file_path": "diffusers_nodes_library/pipelines/cosmos/cosmos_pipeline.py",
      "metadata": {
        "category": "video/cosmos",
        "description": "Generate videos from text with Cosmos via ü§ó Diffusers.",
        "display_name": "Cosmos"
      }
    },
    {
      "class_name": "DeprecatedPipeline",
      "file_path": "diffusers_nodes_library/pipelines/deprecated/deprecated_pipeline.py",
      "metadata": {
        "category": "image/deprecated",
        "description": "Generate images with deprecated diffusers pipelines via ü§ó Diffusers.",
        "display_name": "Deprecated Pipeline"
      }
    },
    {
      "class_name": "DitPipeline",
      "file_path": "diffusers_nodes_library/pipelines/dit/dit_pipeline.py",
      "metadata": {
        "category": "image/dit",
        "description": "Generate images with DiT (Diffusion Transformer) via ü§ó Diffusers.",
        "display_name": "DiT"
      }
    },
    {
      "class_name": "EasyanimatePipeline",
      "file_path": "diffusers_nodes_library/pipelines/easyanimate/easyanimate_pipeline.py",
      "metadata": {
        "category": "video/easyanimate",
        "description": "Generate videos with EasyAnimate via ü§ó Diffusers.",
        "display_name": "EasyAnimate"
      }
    },
    {
      "class_name": "HidreamImagePipeline",
      "file_path": "diffusers_nodes_library/pipelines/hidream_image/hidream_image_pipeline.py",
      "metadata": {
        "category": "image/hidream_image",
        "description": "Generate images with HiDream via ü§ó Diffusers.",
        "display_name": "HiDream Image"
      }
    },
    {
      "class_name": "HunyuanVideoPipeline",
      "file_path": "diffusers_nodes_library/pipelines/hunyuan_video/hunyuan_video_pipeline.py",
      "metadata": {
        "category": "video/hunyuan_video",
        "description": "Generate videos with HunyuanVideo via ü§ó Diffusers.",
        "display_name": "HunyuanVideo"
      }
    },
    {
      "class_name": "HunyuanditPipeline",
      "file_path": "diffusers_nodes_library/pipelines/hunyuandit/hunyuandit_pipeline.py",
      "metadata": {
        "category": "image/hunyuandit",
        "description": "Generate images with HunyuanDiT via ü§ó Diffusers.",
        "display_name": "HunyuanDiT"
      }
    },
    {
      "class_name": "I2VGenXLPipeline",
      "file_path": "diffusers_nodes_library/pipelines/i2vgen_xl/i2vgen_xl_pipeline.py",
      "metadata": {
        "category": "video/i2vgen_xl",
        "description": "Generate videos from images with I2VGen-XL via ü§ó Diffusers.",
        "display_name": "I2VGen-XL"
      }
    },
    {
      "class_name": "KandinskyPipeline",
      "file_path": "diffusers_nodes_library/pipelines/kandinsky/kandinsky_pipeline.py",
      "metadata": {
        "category": "image/kandinsky",
        "description": "Generate images with Kandinsky via ü§ó Diffusers.",
        "display_name": "Kandinsky"
      }
    },
    {
      "class_name": "Kandinsky22Pipeline",
      "file_path": "diffusers_nodes_library/pipelines/kandinsky2_2/kandinsky2_2_pipeline.py",
      "metadata": {
        "category": "image/kandinsky2_2",
        "description": "Generate images with Kandinsky 2.2 via ü§ó Diffusers.",
        "display_name": "Kandinsky 2.2"
      }
    },
    {
      "class_name": "KolorsPipeline",
      "file_path": "diffusers_nodes_library/pipelines/kolors/kolors_pipeline.py",
      "metadata": {
        "category": "image/kolors",
        "description": "Generate images with Kolors via ü§ó Diffusers.",
        "display_name": "Kolors"
      }
    },
    {
      "class_name": "LatentConsistencyModelsPipeline",
      "file_path": "diffusers_nodes_library/pipelines/latent_consistency_models/latent_consistency_models_pipeline.py",
      "metadata": {
        "category": "image/latent_consistency_models",
        "description": "Generate images with fast one-step or multi-step Latent Consistency Models via ü§ó Diffusers.",
        "display_name": "Latent Consistency Models"
      }
    },
    {
      "class_name": "LatentDiffusionPipeline",
      "file_path": "diffusers_nodes_library/pipelines/latent_diffusion/latent_diffusion_pipeline.py",
      "metadata": {
        "category": "image/latent_diffusion",
        "description": "Generate images with Latent Diffusion via ü§ó Diffusers.",
        "display_name": "Latent Diffusion"
      }
    },
    {
      "class_name": "LattePipeline",
      "file_path": "diffusers_nodes_library/pipelines/latte/latte_pipeline.py",
      "metadata": {
        "category": "video/latte",
        "description": "Generate videos with Latte via ü§ó Diffusers.",
        "display_name": "Latte"
      }
    },
    {
      "class_name": "LeditsPpPipeline",
      "file_path": "diffusers_nodes_library/pipelines/ledits_pp/ledits_pp_pipeline.py",
      "metadata": {
        "category": "image/ledits_pp",
        "description": "Edit images with LEDITS++ via ü§ó Diffusers.",
        "display_name": "LEDITS++"
      }
    },
    {
      "class_name": "LtxPipeline",
      "file_path": "diffusers_nodes_library/pipelines/ltx/ltx_pipeline.py",
      "metadata": {
        "category": "video/ltx",
        "description": "Generate videos with LTX Video via ü§ó Diffusers.",
        "display_name": "LTX Video"
      }
    },
    {
      "class_name": "LuminaPipeline",
      "file_path": "diffusers_nodes_library/pipelines/lumina/lumina_pipeline.py",
      "metadata": {
        "category": "image/lumina",
        "description": "Generate images with Lumina via ü§ó Diffusers.",
        "display_name": "Lumina"
      }
    },
    {
      "class_name": "Lumina2Pipeline",
      "file_path": "diffusers_nodes_library/pipelines/lumina2/lumina2_pipeline.py",
      "metadata": {
        "category": "image/lumina2",
        "description": "Generate images with Lumina2 via ü§ó Diffusers.",
        "display_name": "Lumina2"
      }
    },
    {
      "class_name": "MarigoldPipeline",
      "file_path": "diffusers_nodes_library/pipelines/marigold/marigold_pipeline.py",
      "metadata": {
        "category": "image/marigold",
        "description": "Generate depth maps from images with Marigold via ü§ó Diffusers.",
        "display_name": "Marigold Depth"
      }
    },
    {
      "class_name": "MochiPipeline",
      "file_path": "diffusers_nodes_library/pipelines/mochi/mochi_pipeline.py",
      "metadata": {
        "category": "video/mochi",
        "description": "Generate videos from text with Mochi via ü§ó Diffusers.",
        "display_name": "Mochi"
      }
    },
    {
      "class_name": "OmnigenPipeline",
      "file_path": "diffusers_nodes_library/pipelines/omnigen/omnigen_pipeline.py",
      "metadata": {
        "category": "image/omnigen",
        "description": "Generate images from text and images with OmniGen via ü§ó Diffusers.",
        "display_name": "OmniGen"
      }
    },
    {
      "class_name": "PagPipeline",
      "file_path": "diffusers_nodes_library/pipelines/pag/pag_pipeline.py",
      "metadata": {
        "category": "image/pag",
        "description": "Generate images with Perturbed-Attention Guidance (PAG) via ü§ó Diffusers.",
        "display_name": "PAG"
      }
    },
    {
      "class_name": "PaintByExamplePipeline",
      "file_path": "diffusers_nodes_library/pipelines/paint_by_example/paint_by_example_pipeline.py",
      "metadata": {
        "category": "image/paint_by_example",
        "description": "Inpaint images using example-guided generation via ü§ó Diffusers.",
        "display_name": "Paint by Example"
      }
    },
    {
      "class_name": "PiaPipeline",
      "file_path": "diffusers_nodes_library/pipelines/pia/pia_pipeline.py",
      "metadata": {
        "category": "video/pia",
        "description": "Animate images using text prompts with PIA (Personalized Image Animator) via ü§ó Diffusers.",
        "display_name": "PIA (Personalized Image Animator)"
      }
    },
    {
      "class_name": "SanaPipeline",
      "file_path": "diffusers_nodes_library/pipelines/sana/sana_pipeline.py",
      "metadata": {
        "category": "image/sana",
        "description": "Generate high-resolution images efficiently with SANA via ü§ó Diffusers.",
        "display_name": "SANA"
      }
    },
    {
      "class_name": "SemanticStableDiffusionPipeline",
      "file_path": "diffusers_nodes_library/pipelines/semantic_stable_diffusion/semantic_stable_diffusion_pipeline.py",
      "metadata": {
        "category": "image/semantic_stable_diffusion",
        "description": "Edit images with semantic guidance via ü§ó Diffusers.",
        "display_name": "Semantic Stable Diffusion"
      }
    },
    {
      "class_name": "ShapEPipeline",
      "file_path": "diffusers_nodes_library/pipelines/shap_e/shap_e_pipeline.py",
      "metadata": {
        "category": "3d/shap_e",
        "description": "Generate 3D objects from text prompts with Shap-E via ü§ó Diffusers.",
        "display_name": "Shap-E"
      }
    },
    {
      "class_name": "StableCascadePipeline",
      "file_path": "diffusers_nodes_library/pipelines/stable_cascade/stable_cascade_pipeline.py",
      "metadata": {
        "category": "image/stable_cascade",
        "description": "Generate high-quality images with Stable Cascade via ü§ó Diffusers.",
        "display_name": "Stable Cascade"
      }
    },
    {
      "class_name": "StableDiffusionAttendAndExcitePipeline",
      "file_path": "diffusers_nodes_library/pipelines/stable_diffusion_attend_and_excite/stable_diffusion_attend_and_excite_pipeline.py",
      "metadata": {
        "category": "image/stable_diffusion_attend_and_excite",
        "description": "Generate images with enhanced attention control via ü§ó Diffusers.",
        "display_name": "Stable Diffusion Attend and Excite"
      }
    },
    {
      "class_name": "StableDiffusionDiffeditPipeline",
      "file_path": "diffusers_nodes_library/pipelines/stable_diffusion_diffedit/stable_diffusion_diffedit_pipeline.py",
      "metadata": {
        "category": "image/stable_diffusion_diffedit",
        "description": "Edit images using DiffEdit technique via ü§ó Diffusers.",
        "display_name": "Stable Diffusion DiffEdit"
      }
    },
    {
      "class_name": "StableDiffusionGligenPipeline",
      "file_path": "diffusers_nodes_library/pipelines/stable_diffusion_gligen/stable_diffusion_gligen_pipeline.py",
      "metadata": {
        "category": "image/stable_diffusion_gligen",
        "description": "Generate grounded images with spatial control via ü§ó Diffusers.",
        "display_name": "Stable Diffusion GLIGEN"
      }
    },
    {
      "class_name": "StableDiffusionKDiffusionPipeline",
      "file_path": "diffusers_nodes_library/pipelines/stable_diffusion_k_diffusion/stable_diffusion_k_diffusion_pipeline.py",
      "metadata": {
        "category": "image/stable_diffusion_k_diffusion",
        "description": "Generate images with K-Diffusion samplers via ü§ó Diffusers.",
        "display_name": "Stable Diffusion K-Diffusion"
      }
    },
    {
      "class_name": "StableDiffusionLdm3dPipeline",
      "file_path": "diffusers_nodes_library/pipelines/stable_diffusion_ldm3d/stable_diffusion_ldm3d_pipeline.py",
      "metadata": {
        "category": "image/stable_diffusion_ldm3d",
        "description": "Generate RGB and depth images simultaneously via ü§ó Diffusers.",
        "display_name": "Stable Diffusion LDM3D"
      }
    },
    {
      "class_name": "StableDiffusionPanoramaPipeline",
      "file_path": "diffusers_nodes_library/pipelines/stable_diffusion_panorama/stable_diffusion_panorama_pipeline.py",
      "metadata": {
        "category": "image/stable_diffusion_panorama",
        "description": "Generate panoramic images via ü§ó Diffusers.",
        "display_name": "Stable Diffusion Panorama"
      }
    },
    {
      "class_name": "StableDiffusionSafePipeline",
      "file_path": "diffusers_nodes_library/pipelines/stable_diffusion_safe/stable_diffusion_safe_pipeline.py",
      "metadata": {
        "category": "image/stable_diffusion_safe",
        "description": "Generate safe content images with safety checking via ü§ó Diffusers.",
        "display_name": "Stable Diffusion Safe"
      }
    },
    {
      "class_name": "StableDiffusionSagPipeline",
      "file_path": "diffusers_nodes_library/pipelines/stable_diffusion_sag/stable_diffusion_sag_pipeline.py",
      "metadata": {
        "category": "image/stable_diffusion_sag",
        "description": "Generate images with Self-Attention Guidance (SAG) for improved quality via ü§ó Diffusers.",
        "display_name": "Stable Diffusion SAG"
      }
    },
    {
      "class_name": "T2IAdapterPipeline",
      "file_path": "diffusers_nodes_library/pipelines/t2i_adapter/t2i_adapter_pipeline.py",
      "metadata": {
        "category": "image/t2i_adapter",
        "description": "Generate images with T2I-Adapter conditioning from control images via ü§ó Diffusers.",
        "display_name": "T2I-Adapter"
      }
    },
    {
      "class_name": "TextToVideoSynthesisPipeline",
      "file_path": "diffusers_nodes_library/pipelines/text_to_video_synthesis/text_to_video_synthesis_pipeline.py",
      "metadata": {
        "category": "video/text_to_video_synthesis",
        "description": "Generate videos from text prompts via ü§ó Diffusers.",
        "display_name": "Text to Video Synthesis"
      }
    },
    {
      "class_name": "UnidiffuserPipeline",
      "file_path": "diffusers_nodes_library/pipelines/unidiffuser/unidiffuser_pipeline.py",
      "metadata": {
        "category": "image/unidiffuser",
        "description": "Generate images and text jointly with UniDiffuser via ü§ó Diffusers.",
        "display_name": "UniDiffuser"
      }
    },
    {
      "class_name": "VisualclozePipeline",
      "file_path": "diffusers_nodes_library/pipelines/visualcloze/visualcloze_pipeline.py",
      "metadata": {
        "category": "image/visualcloze",
        "description": "Complete missing image regions using visual cloze techniques via ü§ó Diffusers.",
        "display_name": "VisualCloze"
      }
    },
    {
      "class_name": "MusicldmPipeline",
      "file_path": "diffusers_nodes_library/pipelines/musicldm/musicldm_pipeline.py",
      "metadata": {
        "category": "audio/musicldm",
        "description": "Generate music from text via ü§ó Diffusers.",
        "display_name": "MusicLDM"
      }
    },
    {
      "class_name": "PixartAlphaPipeline",
      "file_path": "diffusers_nodes_library/pipelines/pixart_alpha/pixart_alpha_pipeline.py",
      "metadata": {
        "category": "image/pixart_alpha",
        "description": "Generate high-quality images with PixArt-Œ± via ü§ó Diffusers.",
        "display_name": "PixArt-Œ±"
      }
    },
    {
      "class_name": "StableAudioPipeline",
      "file_path": "diffusers_nodes_library/pipelines/stable_audio/stable_audio_pipeline.py",
      "metadata": {
        "category": "audio/stable_audio",
        "description": "Generate audio from text with Stable Audio via ü§ó Diffusers.",
        "display_name": "Stable Audio"
      }
    },
    {
      "class_name": "StableDiffusionPipeline",
      "file_path": "diffusers_nodes_library/pipelines/stable_diffusion/stable_diffusion_pipeline.py",
      "metadata": {
        "category": "image/stable_diffusion",
        "description": "Generate images with Stable Diffusion via ü§ó Diffusers.",
        "display_name": "Stable Diffusion"
      }
    },
    {
      "class_name": "StableDiffusion3Pipeline",
      "file_path": "diffusers_nodes_library/pipelines/stable_diffusion_3/stable_diffusion_3_pipeline.py",
      "metadata": {
        "category": "image/stable_diffusion_3",
        "description": "Generate images with Stable Diffusion 3 via ü§ó Diffusers.",
        "display_name": "Stable Diffusion 3"
      }
    },
    {
      "class_name": "StableDiffusionXLPipeline",
      "file_path": "diffusers_nodes_library/pipelines/stable_diffusion_xl/stable_diffusion_xl_pipeline.py",
      "metadata": {
        "category": "image/stable_diffusion_xl",
        "description": "Generate high-resolution images with Stable Diffusion XL via ü§ó Diffusers.",
        "display_name": "Stable Diffusion XL"
      }
    },
    {
      "class_name": "StableVideoDiffusionPipeline",
      "file_path": "diffusers_nodes_library/pipelines/stable_video_diffusion/stable_video_diffusion_pipeline.py",
      "metadata": {
        "category": "video/stable_video_diffusion",
        "description": "Generate videos from images with Stable Video Diffusion via ü§ó Diffusers.",
        "display_name": "Stable Video Diffusion"
      }
    },
    {
      "class_name": "UnclipPipeline",
      "file_path": "diffusers_nodes_library/pipelines/unclip/unclip_pipeline.py",
      "metadata": {
        "category": "image/unclip",
        "description": "Generate images with unCLIP via ü§ó Diffusers.",
        "display_name": "unCLIP"
      }
    },
    {
      "class_name": "WuerstchenPipeline",
      "file_path": "diffusers_nodes_library/pipelines/wuerstchen/wuerstchen_pipeline.py",
      "metadata": {
        "category": "image/wuerstchen",
        "description": "Generate images efficiently with Wuerstchen via ü§ó Diffusers.",
        "display_name": "Wuerstchen"
      }
    }
  ]
}
