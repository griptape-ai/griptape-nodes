"""Storage utility for file operations."""

import logging

import httpx

from griptape_nodes.drivers.storage.base_storage_driver import BaseStorageDriver

logger = logging.getLogger("griptape_nodes")


class StorageUtility:
    """Utility class for storage operations."""

    def __init__(self, storage_driver: BaseStorageDriver) -> None:
        """Initialize the StorageUtility.

        Args:
            storage_driver: A pre-configured storage driver instance.
        """
        self.storage_driver = storage_driver

    def save_static_file(self, data: bytes, file_name: str) -> str:
        """Saves a static file to the storage backend.

        This is used to save files that are generated by the node, such as images or other artifacts.

        Args:
            data: The file data to save.
            file_name: The name of the file to save.

        Returns:
            The URL of the saved file.
        """
        response = self.storage_driver.create_signed_upload_url(file_name)

        try:
            response = httpx.request(
                response["method"],
                response["url"],
                content=data,
                headers=response["headers"],
            )
            response.raise_for_status()
        except httpx.HTTPStatusError as e:
            msg = str(e.response.json())
            logger.error(msg)
            raise ValueError(msg) from e

        url = self.storage_driver.create_signed_download_url(file_name)

        return url

    def get_static_file(self, file_name: str) -> bytes:
        """Get a static file from the storage backend.

        Args:
            file_name: The name of the file to get.

        Returns:
            The file content as bytes.
        """
        url = self.storage_driver.create_signed_download_url(file_name)

        try:
            response = httpx.get(url)
            response.raise_for_status()
        except httpx.HTTPStatusError as e:
            msg = str(e.response.json())
            logger.error(msg)
            raise ValueError(msg) from e

        return response.content

    def delete_static_file(self, file_name: str) -> None:
        """Delete a static file from storage.

        Args:
            file_name: The name of the file to delete.

        Raises:
            ValueError: If the file could not be deleted.
        """
        try:
            self.storage_driver.delete_file(file_name)
            logger.info("Successfully deleted static file: %s", file_name)
        except Exception as e:
            msg = f"Failed to delete static file {file_name}: {e}"
            logger.error(msg)
            raise ValueError(msg) from e

    def list_files(self) -> list[str]:
        """List all files in the storage backend.

        Returns:
            A list of file names in the storage.
        """
        return self.storage_driver.list_files()
